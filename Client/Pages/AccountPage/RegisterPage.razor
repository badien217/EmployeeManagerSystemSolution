@page "/identity/account/register"
@using Syncfusion.Blazor.Popups
@layout AuthenticationLayout
@inject SfDialogService DialogService
<div class="container">
    <div class="row">
        <div class="col-lg-5"></div>
        <div class="col-lg-2">
            </div>
            <div class="col-lg-5">
            <EditForm Enhance Model="User" OnValidSubmit="HandlerRegister">
                <DataAnnotationsValidator />
                <div class="card bg-dark justify-content-center" style="opacity:0.5;margin-top:50%;border-radius:10px;color:white;font-weight:bold">
                    <div class="card-header text-center fs-5">
                         Register an account
                    </div>
                    <div class="container">
                        <div class="row">
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                            <div class="col-lg-4 col-md-4 col-sm-4 d-flex justify-content-center">
                                <img src="../images/companylogo/logo.jpg" height="50" width="50" style="border-radius:20px" />
                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="form-group mt-3">
                            <label class="form-label">Fullname</label>
                            <InputText @bind-Value="User.Fullname" class="form-control"></InputText>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="User.Email" class="form-control"></InputText>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Password</label>
                            <input type="password" @bind="User.Password" class="form-control"></input>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">ConfirmPassword</label>
                            <input type="password" @bind="User.ComfirmPassword" class="form-control"></input>
                        </div>
                        <div class="form-group mt-3">
                            @if (ShowLoadingBuuton)
                            {
                                <Client.Pages.OtherPages.ButtonLoadingSpinner></Client.Pages.OtherPages.ButtonLoadingSpinner>
                            }
                            else
                            {
                                <button class="btn btn-primary float-end" type="submit">Register </button>
                            }
                                
                                
                            </div>
                    </div>
                    <div class="card-footer">
                        <span class="text-center">
                            Don't have account? | <a class="btn-link" href="identity/account/login">Sign In</a>
                        </span>
                        <ValidationSummary />
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>
@code {
    public bool ShowLoadingBuuton { get; set; } = false;
    Register User = new();
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }
    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState).User;
        bool isUserAuthenticated = user.Identity!.IsAuthenticated;
        if (!isUserAuthenticated)
            NavManager.NavigateTo("/home/daskboard");
    }
    async Task HandlerRegister()
    {
        ShowLoadingBuuton = true;
        var result = await accountServices.CreateAsync(User);
        if (result.Flag)
        {
            await DisplayDialog(result.Message, "Login Success");

            User = new();
        }
        else
        {
            await DisplayDialog(result.Message, "Alert");
        }
        ShowLoadingBuuton = false;
    }
    private async Task DisplayDialog(string content, string title)
    {
        await DialogService.AlertAsync(content, title);
    }

}