
@using BaseLibrary.Entities

@if (allState.ShowGeneralDepartment)
{
    <div class="continer mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <button  class=" btn btn-outline-success float-end" @onclick="OpenDialog" >
                            <i class="bi bi-plus-circle"></i>Add Department
                        </button>
                    </div>
                    <div class="card-header" style="max-height:580px ;overflow-x:hidden;overflow-y:scroll">
                        <div class="card-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col">First</th>
                                        <th scope="col">Last</th>
                                        <th scope="col">Handle</th>

                                    </tr>
                                </thead>
                                <tbody>
                                    @if(GeneralDepartments is  not null)
                                    {
                                        int count = 1;
                                        foreach(var item in GeneralDepartments)
                                        {
                                            <tr>
                                                <th scope="row">@count</th>
                                                <td>@item.Id</td>
                                                <td>@item.Name</td>
                                                <td>
                                                    <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(item)"></i>
                                                    <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(item)"></i>
                                                </td>
                                            </tr>
                                            count++;
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

            </div>

        </div>
    </div>
}
<GeneralDepartmentDialog @ref="generalDepartmentDialog"
                         HandleSaveOperationEvent="HandleSaveOperationEvent"
                         GeneralDepartment="GeneralDepartment"/>
<style>
    .cursorStyle{
        cursor:pointer;
    }
</style>
@code{
    GeneralDepartmentDialog? generalDepartmentDialog;
    GeneralDepartment GeneralDepartment = new();
    public string title = "Add";
    public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
    protected override async void OnInitialized()
    {
        await GetGeneralDepartment();
        allState.Action += StateHasChanged;
    }

    private async Task GetGeneralDepartment()
    {
        GeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
    }
    void OpenDialog()
    {
        generalDepartmentDialog?.OpenDialog();

    }
    private async Task HandleSaveOperationEvent(GeneralDepartment generalDepartment)
    {
        bool successCheck = false;
        if (generalDepartment.Id > 0)
        {
            var result = await generalDepartmentService.Update(
            GeneralDepartment, Constants.GeneralDepartmentBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await generalDepartmentService.Insert(
            generalDepartment, Constants.GeneralDepartmentBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            GeneralDepartment = new();
            await GetGeneralDepartment();
            generalDepartmentDialog?.ChangeTile("Add");
        }

    }
    private void EditClicked(GeneralDepartment dep)
    {
        generalDepartmentDialog?.ChangeTile("Update");
        GeneralDepartment = dep;
        OpenDialog();
    }
    private async Task DeleteClicked(GeneralDepartment dep)
    {
        bool confirm = await dialogServices.ConfirmAsync($"Are you sure you wanan delete {dep.Name}?", "Confirm Delete");
        if (!confirm) return;
        var response = await generalDepartmentService.DeleteById(dep.Id, Constants.GeneralDepartmentBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetGeneralDepartment();

    }
    private async Task<bool> DisplayMessage(bool flag,string message)
    {
        if (flag)
        {
            await dialogServices.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogServices.AlertAsync(message, "Alert");
            return false;
        }
    } 
    public void Dispose()
    {
        allState.Action -= StateHasChanged;

    }

}
